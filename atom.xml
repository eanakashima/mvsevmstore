<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[MVSEVMSTORE]]></title>
  <link href="http://mvsevmstore.org/atom.xml" rel="self"/>
  <link href="http://mvsevmstore.org/"/>
  <updated>2015-03-14T18:27:55-07:00</updated>
  <id>http://mvsevmstore.org/</id>
  <author>
    <name><![CDATA[e.a.nakashima]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What to Say About JavaScript]]></title>
    <link href="http://mvsevmstore.org/blog/2014/07/25/what-to-say-about-javascript/"/>
    <updated>2014-07-25T17:18:00-07:00</updated>
    <id>http://mvsevmstore.org/blog/2014/07/25/what-to-say-about-javascript</id>
    <content type="html"><![CDATA[<p>When I decide whether or not to use the latest javascript tool/library/framework,
I first look at what it <em>does</em> — what the features are. But after that, there are
a number of other factors that influence my decision. I never like hearing people
boil these things down to &ldquo;Ember sucks&rdquo; or &ldquo;Underscore is useless,&rdquo; so I&rsquo;ve tried
to come up with a more precise way to describe what I like and don&rsquo;t. I talk
about what the thing provides on three different axes: convention, abstraction,
and sugar.</p>

<ul>
<li><p><strong>Convention</strong>: does it provide and enforce conventions for writing
and organizing my code? Are these conventions clear, easy to pick up, and easy
to work with?</p></li>
<li><p><strong>Abstraction</strong>: does it isolate me from details and platform
quirks I don&rsquo;t care about? Is working with the abstraction layer usually more
expressive and convenient than the alternative? Does it allow you to work at a
more consistent level of abstraction?</p></li>
<li><p><strong>Sugar</strong>:  does it make it fast and pretty for me to write the code
I need to write? Does it offer helpers that make common problems less irritating?</p></li>
</ul>


<h2>So, Coffeescript.</h2>

<p>Coffeescript is probably the best example of a tool I wish I&rsquo;d applied these
axes to. I had a bad introduction to coffeescript, watching rubyists try to make
it work like ruby on an older application where only a suite of flaky Jasmine
tests was in coffeescript and trying to find the source line-number of a
failing test was a perennial nuisance. But I think the bigger problem was that I
had the wrong expectations for how coffeescript was going to help me. If I&rsquo;d
just asked about these three different aspects, I would have figured it out a
lot sooner.</p>

<h3>Convention</h3>

<p>While coffeescript keeps most of the flexibility of javascript and doesn&rsquo;t
provide a large number of new conventions, the ones it does encourage are
essentials that go a long way toward keeping sanity in a js-heavy application.</p>

<h4>Discourage globals</h4>

<p>First, coffeescript discourages the use of globals by wrapping every file in an
immediately-executing function. While nothing prevents you from adding variables
to the global scope, the small barrier of needing to explicitly make a variable
global is enough to encourage me to find better ways to share state between features.</p>

<h4>Encourage a single way to do &ldquo;classes&rdquo;</h4>

<p>It&rsquo;s always been possible to simulate classes and class-based inheritance in
javascript, but the sheer number of different ways to do it makes it daunting,
especially on large teams or in big applications. I&rsquo;ve seen a lot of projects
skip &ldquo;classes&rdquo; entirely rather than incur the cost of choosing and evangelizing
one right way to do them. Coffeescript gives you one simple way to do classes,
and they work in approximately the way people expect them to.</p>

<h3>Abstraction</h3>

<p>Abstraction is the axis where most of my coffeescript confusion originated.
Visually, coffeescript looks a bit like python or ruby, and I think this lead me
(and many developers I&rsquo;ve worked with) to assume that coffeescript would
abstract away a lot of the quirks of javascript and let you write in some sort
of dynamically-typed esperanto. But coffeescript isn&rsquo;t heavy-handed enough to pull
this off (and now I agree that it&rsquo;s probably a good thing).</p>

<p>I still think in javascript regularly when I write coffeescript. One
example: this common case where you decide whether to use the <code>?</code> operator based
on whether you want to ask if a value is falsy or whether it&rsquo;s null-like.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="c1"># won&#39;t execute if length is 0</span>
</span><span class='line'>  <span class="nx">doStuff</span><span class="p">()</span> <span class="k">if</span> <span class="nx">myElement</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># will execute if length is 0</span>
</span><span class='line'>  <span class="nx">doStuff</span><span class="p">()</span> <span class="k">if</span> <span class="nx">myElement</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m glad to have the flexibility to do both, but coffeescript doesn&rsquo;t change the
fact that I need to understand the difference.</p>

<h3>Sugar</h3>

<p>This is the other place where coffeescript shines, of course. I think of
javascript as relatively simple, so I didn&rsquo;t realize how much I&rsquo;d wanted a sugar
layer on top of it, but now that I have it, I&rsquo;m pleased about all those minutes
I save not typing <code>var</code> and <code>function</code>.</p>

<p>The loop comprehension feature, while easy to abuse, is a particularly pleasing
example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// javascript</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ids</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;top&quot;</span><span class="p">,</span> <span class="s2">&quot;nav&quot;</span><span class="p">,</span> <span class="s2">&quot;sidebar&quot;</span><span class="p">,</span> <span class="s2">&quot;main&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">foods</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">id</span> <span class="o">=</span> <span class="nx">ids</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">id</span> <span class="o">!==</span> <span class="s2">&quot;main&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>becomes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># coffeescript</span>
</span><span class='line'><span class="nv">ids = </span><span class="p">[</span><span class="s">&quot;top&quot;</span><span class="p">,</span> <span class="s">&quot;nav&quot;</span><span class="p">,</span> <span class="s">&quot;sidebar&quot;</span><span class="p">,</span> <span class="s">&quot;main&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">print</span> <span class="nx">id</span> <span class="k">for</span> <span class="nx">id</span> <span class="k">in</span> <span class="nx">ids</span> <span class="k">when</span> <span class="nx">id</span> <span class="o">isnt</span> <span class="s">&quot;main&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Other javascript things</h2>

<p>With these axes, I find that it&rsquo;s a lot easier to say what I like and don&rsquo;t like
about other javascript tools &amp; libraries. Underscore is great because it
provides sugary utility functions and nothing else. jQuery is an amazing
abstraction layer on top of different DOM implementations, but it doesn&rsquo;t provide
much in the way of conventions. And people get frustrated because they work
with jQuery in projects where <em>nothing</em> is providing a convention layer. Which,
incidentally, is an easier problem to talk about than the problem where jQuery
just &ldquo;sucks.&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sunset Testing for Short-Lived Code]]></title>
    <link href="http://mvsevmstore.org/blog/2014/07/25/sunset-testing-for-short-lived-code/"/>
    <updated>2014-07-25T16:40:00-07:00</updated>
    <id>http://mvsevmstore.org/blog/2014/07/25/sunset-testing-for-short-lived-code</id>
    <content type="html"><![CDATA[<p><em>Rachel Myers and I talked about Sunset Testing in our talks at O’Reilly’s
Fluent Conf 2014 and Front-End Ops Conf, and a number of people asked us if we
had a blog post on the topic that they could share with their coworkers. We
didn’t, so here it is, somewhat belatedly.</em></p>

<p>When I write some javascript to work around a browser compatibility bug or some
custom ruby to show different configurations for an A/B test, I always have to
get past a bad feeling before checking it in. It helps to write a comment,
something like “Workaround for an IE8 bug,” or “Delete this when we finish the
navigation A/B test,” so it’s obvious when we can remove the code, but it
always feels like a bit of a defeat just to have this code that we know is
short-lived alongside our business logic that’s core to the domain.</p>

<p>Of course, good code organization practices help — browser compatibility code
can be moved into a “polyfills” directory and a good A/B framework can abstract
most of the hurt out of your application — but there’s always a few files
hanging around that you just <em>know</em> you’ll have to go back to in a few months.
For those files, Sunset Tests might be the answer.</p>

<h2>Sunset Tests</h2>

<p>Sunset Tests are tests that remind us to delete or at least revisit temporary
code at some point in the future. I first got the idea from my long-time coworker
<a href="http://github.com/sax">Eric Saxby</a>. We were pairing on a feature A/B test, and as the finishing
touch, he added a test that would fail in a month or so and basically remind us,
“Hey future us, remember that you hate all this A/B test code and want to delete
it now.”  Turns out, there are more places this is useful than just A/B tests.
My coworker/cospeaker <a href="http://github.com/rachelmyers">Rachel Myers</a> coined the term “Sunset Test” and I like it
because it reminds me of all the time I’ll be able to spend on my beach vacation
while everyone without sunset tests is busy wading through old
weird <code>.js.erb</code> files trying to figure out what they do. Err, I mean, I like the
tests because they remind you of when you can sunset your short-lived code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// A/B test testing</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span> <span class="err">“</span><span class="nx">homepage</span> <span class="nx">banner</span> <span class="nx">a</span><span class="o">/</span><span class="nx">b</span> <span class="nx">test</span> <span class="nx">is</span> <span class="nx">active</span><span class="err">“</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">today</span>     <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">testEndDate</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="err">“</span><span class="mi">2014</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">19</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">today</span> <span class="o">&lt;</span> <span class="nx">testEndDate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ok</span><span class="p">(</span><span class="nx">activeABTests</span><span class="p">.</span><span class="nx">homepage</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ok</span><span class="p">(</span><span class="o">!</span><span class="nx">activeABTests</span><span class="p">.</span><span class="nx">homepage</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>My favorite use case for Sunset Tests is as a reminder for when we can pull out
browser compatibility code we don’t need anymore. I’ve worked on a number of
<em>very</em> large Ruby on Rails apps, and run into a lot of random shims &amp; browser
hacks that <em>seem</em> like they might be dead but don’t definitively express their
ability to be deleted. Here’s a good example: this <code>Array.prototype.indexOf</code>
polyfill file. Unless you remember a lot about the dawn of ECMA-262, you might
not know what this is for or whether or not you can take it out. Even if you
<em>do</em> know what it does, do you remember <em>which</em> version of IE added native
support for <code>[‘a’,’b’].indexOf(‘b’)</code>? I don’t. And I added this polyfill to the
codebase.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">indexOf</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">searchElement</span><span class="p">,</span> <span class="nx">fromIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">k</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 1. Let O be the result of calling ToObject passing</span>
</span><span class='line'>    <span class="c1">//    the this value as the argument.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;&quot;this&quot; is null or not defined&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//... continues for 150 lines</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we can test it like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span> <span class="err">“</span><span class="nx">indexOf</span> <span class="nx">polyfill</span> <span class="nx">expired</span><span class="o">?</span><span class="err">&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">browserSupport</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">polyfill</span><span class="p">.</span><span class="nx">browserSupport</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">today</span>     <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">iE8Sunset</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">browserSupport</span><span class="p">[</span><span class="err">‘</span><span class="nx">ie</span><span class="o">-</span><span class="mi">8</span><span class="err">’</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">today</span> <span class="o">&lt;</span> <span class="nx">iE8Sunset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ok</span><span class="p">(</span><span class="nx">polyfilled</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ok</span><span class="p">(</span><span class="o">!</span><span class="nx">polyfilled</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is best coupled with a config file that has all the important future dates
you care about. Even if you don’t know the exact date in the future when you’ll
drop support for, say, IE10, it’s worth setting up one of these. Add every
browser version (or every reason for your temporary code), and the date when
you’ll drop support, or the next date you want to think about the problem, if
you don’t know when you’ll drop support. Six months is usually a decently good
runway.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// check our browser analytics on these dates</span>
</span><span class='line'>
</span><span class='line'><span class="nx">browserSupport</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">“</span><span class="nx">safari</span><span class="o">-</span><span class="mf">5.0</span><span class="s2">&quot;: &quot;</span><span class="nx">June</span> <span class="mi">01</span> <span class="mi">2014</span><span class="s2">&quot;,</span>
</span><span class='line'><span class="s2">  “ie-8&quot;</span><span class="o">:</span>       <span class="s2">&quot;June 01 2014&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">“</span><span class="nx">ie</span><span class="o">-</span><span class="mi">9</span><span class="s2">&quot;:       &quot;</span><span class="nx">January</span> <span class="mi">01</span> <span class="mi">2015</span><span class="err">&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the cool part: six months from now, you’ll see this test failure, you’ll
have a reminder of what that code is, and you’ll be able to check with your
team and see if you’re ready to remove it.</p>

<p>Voila. One step closer to code that deletes itself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3rd Party Javascript Checklist]]></title>
    <link href="http://mvsevmstore.org/blog/2014/02/01/3rd-party-javascript-checklist/"/>
    <updated>2014-02-01T16:51:00-08:00</updated>
    <id>http://mvsevmstore.org/blog/2014/02/01/3rd-party-javascript-checklist</id>
    <content type="html"><![CDATA[<p>I’ve been enjoying Ben Vinegar &amp; Anton Kovalyov’s <a href="http://thirdpartyjs.com/">Third-Party Javascript</a>
and would recommend it to anyone who is looking to build their front-end
expertise, not just to those working on third-party scripts.</p>

<p>One thing the book doesn’t provide, but that I found myself wanting, was a short
checklist to run through while evaluating vendors or scripts. So here’s my stab
at that, with some of my own concerns mixed in with ideas from the book. The
book has thorough, detailed info on many of these topics, particularly security,
async loading, and deployment, so if any of these leave you with questions,
check it out.</p>

<h2>Third Party Javascript Checklist</h2>

<ol>
<li><p>Will it be served minified &amp; compressed? Will there also be an expanded,
readable source for developers to reference?</p></li>
<li><p>Is an https version available? Will all related resources be served over
https?</p></li>
<li><p>Is it deployed in a performant way?</p>

<ul>
<li>Is it gzipped?</li>
<li>Does it have HTTP cache headers, set as long as sensible?</li>
<li>Is it served from a CDN?</li>
</ul>
</li>
<li><p>Does it work async? Can it be loaded both with a standard script tag and with
a script loader? Many tag-management solutions force async loading of
third-party scripts. Relying on document.write or expecting dependencies to load
in a particular order may make a script unusable (or unpalatable) for some site
owners.</p></li>
<li><p>Does it add only one variable to the global scope?</p>

<ul>
<li>Bonus: if the whole script can run inside an anonymous function, it may
add zero variables to the global scope.</li>
<li>For widgets that have a visual component: does it namespace all styles
under a widget-specific ID?</li>
</ul>
</li>
<li><p>If it requires a library or framework, does it load the library namespaced
inside itself, and with no-conflict mode enabled, if applicable? Or, if it
depends on the host site to provide dependencies, is there clear documentation
of what they are and which versions are supported?</p></li>
<li><p>Is it as secure as it can be? Third-party scripts can be implicated in most
of the same client-side security issues as first-party scripts. There’s a
thousand different dimensions to this one, but it’s worth taking one last chance
to look out for common problems, like eval-ing user or publisher input, adding
sensitive data to cookies or local storage, and sending user data in the clear.</p></li>
<li><p>How is the script&rsquo;s performance monitored? Is there monitoring for errors?</p></li>
<li><p>Is there enough documentation? Adequate documentation should show how to
include the script and clearly describe what it will do. Ideally, the
documentation will show how to add the script both as a one-liner (script tag)
and with an async loader. The documentation should also state what browsers and
versions are supported. Does it work on a phone? Does it work in IE? Does it
work in IE <em>6</em>?</p></li>
</ol>


<p>Listed out, these requirements seem fairly basic, but it’s the rare third party
that provides them all. While developers are often roped into working with
third-party scripts that are less than ideal, it’s a good idea to at least raise
the issues with the provider and your own company. Many of these items don’t
take much to accommodate — customers and users just don’t ask for them enough.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Enough Web Perf]]></title>
    <link href="http://mvsevmstore.org/blog/2013/11/03/just-enough-web-perf/"/>
    <updated>2013-11-03T15:52:00-08:00</updated>
    <id>http://mvsevmstore.org/blog/2013/11/03/just-enough-web-perf</id>
    <content type="html"><![CDATA[<h1>How to get started with web performance optimization in five steps</h1>

<p>At ModCloth, I was lucky enough to have dedicated time to focus on web
performance optimization. I spent a full month totally focused on web perf and a
few months after that with a dedicated percentage of my queue set aside for perf
work. With this amount of time, my team was able to clean up thousands of lines
of legacy javascript &amp; css, update backend settings, and shave more than 500 ms
off median load times for top pages.</p>

<p>Since then, I’ve been spread a bit more thin, and I’ve been a bit intimidated by
the idea of trying to work web perf into the queue one story at a time.
Performance optimization can seem like a rabbit-hole you can fall down and never
get back out of — like work that&rsquo;s never done. However, I know from my past
experience that it’s possible to bite off a week of web perf work, make an
impact, and get back to other business, so I thought I’d sketch out some notes
on how to do that.</p>

<p>Here’s a rough outline for how to do a meaningful web performance optimization
in five steps. The goal of this is &ldquo;minimum viable web perf” — just enough
optimization to create a user-perceived performance improvement on your site and
get everyone on your team thinking about performance.</p>

<h2>Part 1: Collect metrics!</h2>

<p>If you don&rsquo;t currently collect performance metrics, stop everything and start
here. I (and most of the engineers I&rsquo;ve worked with) always want to jump right
in and start optimizing, which is a nice impulse but a horrible idea. For one,
without a good way to track and quantify performance, you can’t really have
goals or confirm that performance is improving. For two, while engineers always
have a gut feeling for what could be faster (and qualitatively, they’re usually
right), those gut instincts (mine included) rarely point to the highest-impact
optimizations first.</p>

<p>Metrics have other jobs too, once work gets started — they’ll help keep everyone
motivated and also help identify when it makes sense to <em>stop</em> optimizing. Most
projects hit a tipping point after a few weeks or months where they&rsquo;ve burned
through all the highest-impact optimizations, and the same amount of work starts
to yield fewer returns. At that point, particularly on a small team or in a
young company, it may make sense to switch to other work.</p>

<h3>Choosing Tools</h3>

<p>While you can nerd out over metrics forever, I’ve found that the only absolute must-haves are two kinds of data: high-level data collected from real users (RUM) and detailed data that will show <em>how</em> components load. (This second type of data is typically &lsquo;synthetic:&rsquo; collected on your local pc or with tests you run on a specific server.) The real user data will help you verify that you&rsquo;re actually getting faster, and the detailed data will help you identify what points are slow so you know where to spend your time optimizing.</p>

<p>For RUM data, some top choices:</p>

<ul>
<li><strong>Soasta mPulse</strong> (formerly LogNormal): awesome client-side real-user metrics
with histograms, browser stats, and the ability to tag pages into groups.</li>
<li><strong>New Relic:</strong> great for Rails apps; provides both front-end and back-end
metrics.</li>
<li><strong>Google Analytics:</strong> collects client-side real-user perf data by default. The
charts aren’t the most beautiful, but unless your site has massive traffic,
it’s FREEEEE.</li>
</ul>


<p>For synthetic data, <strong>Web Page Test</strong> is a great free tool that will give you an
incredibly detailed breakdown of your front-end loading and rendering. Visit
<a href="http://webpagetest.org">webpagetest.org</a>, run a few tests — from various
locations and browsers — on your most popular pages and save the results so you
have a record of where you started. You can always screen-shot or save the page,
but WebPageTest will also let you export results as a HTTP Archive or .har file,
a data format that will let you look at loading in detail later.</p>

<h4>First Intermission:</h4>

<p>At this point, it’s good to take a moment and decide if a given site or app is
truly slow enough to warrant an optimization. Web Page Test is great for this —
you can run tests from a handful of geographic locations on major pages, <em>and</em>
you can do this same testing on your competitors. Depending on the nature of
your application (and possibly your competition), you may be able to skip
optimizing for now.</p>

<h3>Part 2: Find high-impact optimizations</h3>

<p>It’s easy for teams to fall into the habit of doing cargo cult performance
optimizations. For this reason, it’s essential to do some audits and write up a
prioritized list. This exercise was the only thing that prevented my team from
spending two weeks to enable full-page caching for a popular page of the site —
an optimization that sounded like a great idea, but wasn’t needed for
scalability and would have shaved only a few milliseconds off response times.</p>

<p>Start by auditing the 2-3 most popular pages of the site to see how the pages
perform:</p>

<ol>
<li><p>Run YSlow and PageSpeed Insights. These tools audit pages for performance
best practices and spit out a list of recommendations, grouped by priority.</p></li>
<li><p>Take a look at your time-to-first-byte metrics on top pages. For most sites,
performance is 80% front-end and 20% back-end, but If it’s taking two seconds
to get the first byte of content to your users, you may need to start with
back-end optimizations first.</p></li>
<li><p>Find slow or blocking resources. Web Page Test will provide you with a
waterfall diagram that will let you see what&rsquo;s taking a long time, what
scripts consume lots of CPU &amp; memory while they run, and what&rsquo;s blocking
other resources from downloading. Take note of these and add them to your
 list for Part Four.</p></li>
</ol>


<h3>Part 3: Flip all the switches</h3>

<p>YSlow and PageSpeed will probably identify some optimizations that are
essentially configuration changes. It usually makes sense to start with these,
since they&rsquo;ll provide the most bang for the buck. Changes like gzipping CSS &amp; JS
files, adding or increasing file caching headers, or adding domain sharding for
images can be done once &amp; kept in place with minimal maintenance, and they can
result in noticeable performance improvements.</p>

<h4>Second Intermission:</h4>

<p>If you’ve identified a ton of configuration changes and slow points, and you are
wondering how to fit them all in, it may be time to look into tools like
mod_pagespeed, a web server module that will sit in front of your app and apply
a lot of performance best practices for you (e.g. minifying and compressing text
files and images). A team working full-time on web performance can probably do a
better job than mod_pagespeed, but if you have a relatively simple app and don&rsquo;t
have a lot of resources to dedicated to web perf, it&rsquo;s a great way to cover the
bases.</p>

<p>If setting up mod_pagespeed seems intimidating, some CDNs and hosting providers
(e.g. Cloudflare) can offer you a hosted solution that will provide similar
features.</p>

<h3>Part 4: Untangle something.</h3>

<p>Dive in and untangle at least one slow or blocking resource you found in step #2.</p>

<p>Chances are, you found at least one thing in Step #2 that was slowing down your
page loads. Maybe all your javascripts load synchronously in the head of the
page, and you want to move them down below your footer. Maybe you have a bunch
of scripting that executes on DOM-ready, eating up memory and CPU. Maybe you
have a zillion unused CSS selectors. Maybe you have some major application
performance issues to untangle, like slow queries or n+1 queries. Grab whichever
one of these is having the greatest impact on your users and untangle it.</p>

<p>If you can, deploy the fix by itself so you can try to measure the impact it has
on performance. Lather, rinse, repeat.</p>

<h3>Part 5. Share</h3>

<p>It’s easy to get stuck in Part 4 forever, but there’s an equally important step
that you can’t skip: telling your team about the work you did, why it matters,
and what they can do to help. Share load time numbers, compare yourself to
competitors, and tell everyone about the work you did and what you want to do
next. (Extra credit: use Charles or a similar tool to show everyone what your
site looks like loading in Internet Explorer 8 over a low-end DSL connection,
<em>then</em> share all your numbers.)</p>

<p>Ultimately, everyone working on the site or app has an impact on performance,
whether it&rsquo;s content owners adding images, marketers adding third-party web
tools, or product managers planning new features. If you don&rsquo;t share your work
with all of these people, they&rsquo;ll start to feel like adversaries who are slowing
down the site with all of their tracking tags and photo carousels and social
sharing widgets. But ultimately, everyone in your company can understand the
benefits of a fast site — sharing web performance work with them goes a long way
toward helping to keep them as partners.</p>
]]></content>
  </entry>
  
</feed>
